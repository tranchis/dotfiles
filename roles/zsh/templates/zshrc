# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$(brew --prefix)/bin:$PATH
export TERM="xterm-256color"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

ZSH_AUTOSUGGEST_MANUAL_REBIND="yes"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  zsh-autosuggestions
  git
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="$(brew --prefix)/man:$MANPATH"

# You may need to manually set your language environment

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
  test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
#  test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
#  echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
  eval $($(brew --prefix)/bin/brew shellenv)
fi

export DISPLAY=:0.0
export PATH=~/bin/:$PYENV_ROOT/bin:/opt/homebrew/bin:/snap/bin/:$PATH
export WORKON_HOME=~/Envs

# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(rbenv init -)"
unset JAVA_HOME

if [[ "$OSTYPE" == "darwin"* ]]; then
  export JAVA_HOME=`/usr/libexec/java_home -v1.8`
fi

alias clone="git clone $*"

export EDITOR=vim

# Add rbenv to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="/opt/homebrew/bin:$(brew --prefix)/opt/bison/bin:$(brew --prefix)/opt/flex/bin:$(brew --prefix)/opt/mysql-client/bin:$(brew --prefix)/texlive/2019/bin/x86_64-darwin/:/home/sergio/.local/bin:$(brew --prefix)/sbin:$(brew --prefix)/bin:$PATH"

export LDFLAGS="-L$(brew --prefix)/opt/mysql-client/lib -L$(brew --prefix)/opt/postgresql@10/lib -L$(brew --prefix)/opt/flex/lib -L$(brew --prefix)/opt/bison/lib -L$(brew --prefix)/opt/libffi/lib -L$(brew --prefix)/opt/openblas/lib"
export CPPFLAGS="-I$(brew --prefix)/opt/mysql-client/include -I$(brew --prefix)/opt/postgresql@10/include -I$(brew --prefix)/opt/flex/include -I$(brew --prefix)/opt/libffi/include -I$(brew --prefix)/opt/openblas/include"
export OPENBLAS="$(brew --prefix openblas)"

export PKG_CONFIG_PATH="$(brew --prefix)/opt/mysql-client/lib/pkgconfig:$(brew --prefix)/opt/postgresql@10/lib/pkgconfig:$(brew --prefix)/opt/libffi/lib/pkgconfig"
export PATH="$(brew --prefix)/opt/postgresql@10/bin:$PATH"

if [[ "$OSTYPE" == "darwin"* ]]; then
  export CFLAGS="${CFLAGS} -I$(brew --prefix python-tk)/include -I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include" LDFLAGS="-L$(brew --prefix python-tk)/lib -L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib"
  export LDFLAGS="${LDFLAGS} -L$(xcrun --show-sdk-path)/usr/lib -L$(brew --prefix bzip2)/lib"
  export CFLAGS="${CFLAGS} -I$(xcrun --show-sdk-path)/usr/include -I$(brew --prefix bzip2)/include"
else
  export CFLAGS="${CFLAGS} -I$(brew --prefix python-tk)/include -I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include" LDFLAGS="-L$(brew --prefix python-tk)/lib -L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib"
  export LDFLAGS="${LDFLAGS} -L$(brew --prefix bzip2)/lib"
  export CFLAGS="${CFLAGS} -I$(brew --prefix bzip2)/include"
  export LDFLAGS="${LDFLAGS} -Wl,-rpath,$(brew --prefix openssl)/lib"
  export CPPFLAGS="${CPPFLAGS} -I$(brew --prefix openssl)/include"
  export CONFIGURE_OPTS="${CONFIGURE_OPTS} --with-openssl=$(brew --prefix openssl)"
fi

# export SYSTEM_VERSION_COMPAT=1

# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(virtualenv context dir vcs)

# autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C $(brew --prefix)/bin/mc mc

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/sergio/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/sergio/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/sergio/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/sergio/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
