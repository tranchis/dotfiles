if [ -n "${ZSH_DEBUGRC+1}" ]; then
    zmodload zsh/zprof
fi

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export TERM="xterm-256color"

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="powerlevel10k/powerlevel10k"

ZSH_AUTOSUGGEST_MANUAL_REBIND="yes"

plugins=(
  zsh-autosuggestions
  git
)

source $ZSH/oh-my-zsh.sh

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
  test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
  eval $($(brew --prefix)/bin/brew shellenv)
fi

export DISPLAY=:0.0
export PATH=~/bin/:/opt/homebrew/bin:/snap/bin/:$PATH
export WORKON_HOME=~/Envs
unset JAVA_HOME

if [[ "$OSTYPE" == "darwin"* ]]; then
  export JAVA_HOME=`/usr/libexec/java_home -v1.8`
fi

alias clone="git clone $*"

export EDITOR=vim

if [[ "$OSTYPE" == "darwin"* ]]; then
  if [ "$(arch)" = "arm64" ]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
  else
      eval "$(/usr/local/bin/brew shellenv)"
  fi
else
  export PATH="/opt/homebrew/bin:$PATH"
fi

export PATH="$(brew --prefix)/opt/bison/bin:$(brew --prefix)/opt/flex/bin:$(brew --prefix)/opt/mysql-client/bin:$(brew --prefix)/texlive/2019/bin/x86_64-darwin/:/home/sergio/.local/bin:$(brew --prefix)/sbin:$(brew --prefix)/bin:$PATH"

export LDFLAGS="-L$(brew --prefix)/opt/mysql-client/lib -L$(brew --prefix)/opt/postgresql@10/lib -L$(brew --prefix)/opt/flex/lib -L$(brew --prefix)/opt/bison/lib -L$(brew --prefix)/opt/libffi/lib -L$(brew --prefix)/opt/openblas/lib"
export CPPFLAGS="-I$(brew --prefix)/opt/mysql-client/include -I$(brew --prefix)/opt/postgresql@10/include -I$(brew --prefix)/opt/flex/include -I$(brew --prefix)/opt/libffi/include -I$(brew --prefix)/opt/openblas/include"
export OPENBLAS="$(brew --prefix openblas)"

export PKG_CONFIG_PATH="$(brew --prefix)/opt/mysql-client/lib/pkgconfig:$(brew --prefix)/opt/postgresql@10/lib/pkgconfig:$(brew --prefix)/opt/libffi/lib/pkgconfig"
export PATH="$(brew --prefix)/opt/postgresql@10/bin:~/.local/bin:$PATH"

if [[ "$OSTYPE" == "darwin"* ]]; then
  export CFLAGS="${CFLAGS} -I$(brew --prefix python-tk)/include -I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include" LDFLAGS="-L$(brew --prefix python-tk)/lib -L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib"
  export LDFLAGS="${LDFLAGS} -L$(xcrun --show-sdk-path)/usr/lib -L$(brew --prefix bzip2)/lib"
  export CFLAGS="${CFLAGS} -I$(xcrun --show-sdk-path)/usr/include -I$(brew --prefix bzip2)/include"
else
  export CFLAGS="${CFLAGS} -I$(brew --prefix python-tk)/include -I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include" LDFLAGS="-L$(brew --prefix python-tk)/lib -L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib"
  export LDFLAGS="${LDFLAGS} -L$(brew --prefix bzip2)/lib"
  export CFLAGS="${CFLAGS} -I$(brew --prefix bzip2)/include"
  export LDFLAGS="${LDFLAGS} -Wl,-rpath,$(brew --prefix openssl)/lib"
  export LDFLAGS="${LDFLAGS} -L$(brew --prefix boost)"
  export CPPFLAGS="${CPPFLAGS} -I$(brew --prefix openssl)/include"
  export CONFIGURE_OPTS="${CONFIGURE_OPTS} --with-openssl=$(brew --prefix openssl)"
fi

# complete -o nospace -C $(brew --prefix)/bin/mc mc

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/sergio/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/sergio/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/sergio/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/sergio/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

alias vim="nvim"
alias vi="nvim"
alias oldvim="vim"
# alias ccat='pygmentize -O full,style=lightbulb -g'
# alias ccat='pygmentize -O full,style=nord-darker -g'
alias ccat='pygmentize -O full,style=material -g'
if command -v zoxide > /dev/null; then
  eval "$(zoxide init zsh)"
fi

# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[ -f ~/.config/nvim-Lazyman/.lazymanrc ] && source ~/.config/nvim-Lazyman/.lazymanrc
[ -f ~/.config/nvim-Lazyman/.nvimsbind ] && source ~/.config/nvim-Lazyman/.nvimsbind

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(rbenv init -)"
export NVIM_APPNAME="nvim-LazyVim"

if [ -n "${ZSH_DEBUGRC+1}" ]; then
    zprof
fi
